#include<string.h>

#define NULL 0
#define MAX_TOKEN_NR 3
#define MAX_KEYWORD_NR 3
#define MAX_KEYWORD_STRING_LTH 10

void CopyString(char pcSource[], char pcDestination[]){

    unsigned char ucCounter;
    for(ucCounter = 0; pcSource[ucCounter] > 0; ucCounter++){
		pcDestination[ucCounter] = pcSource[ucCounter];
	}
	pcDestination[ucCounter] = pcSource[ucCounter];
}

enum CompResult {DIFFERENT, EQUAL};

enum CompResult eCompareString(char pcStr1[], char pcStr2[]){

	unsigned char ucCounter;
	for(ucCounter = 0; pcStr1[ucCounter] > 0; ucCounter++){
        if(pcStr1[ucCounter] != pcStr2[ucCounter]) {
            return DIFFERENT;
        }
	}
	if(pcStr1[ucCounter] != pcStr2[ucCounter]) {
        return DIFFERENT;
	}
  return EQUAL;
}

void AppendString (char pcSourceStr[],char pcDestinationStr[]){

	unsigned char ucCounter;
	for(ucCounter = 0; pcDestinationStr[ucCounter] > 0; ++ucCounter){};
    CopyString(pcSourceStr, pcDestinationStr + ucCounter);
}

void ReplaceCharactersInString(char pcString[],char cOldChar,char cNewChar){

	unsigned char ucCounter;
	for(ucCounter = 0; pcString[ucCounter] > 0; ++ucCounter){
		if(pcString[ucCounter] == cOldChar){
			pcString[ucCounter] = cNewChar;
		}
	}
}
void TestOf_CopyString(void) {

	printf("CopyString\n\n ");

	printf("Test 1 - ");
	//pierwszy ³añcuch d³u¿szy
	char cAfterCopyTest1[]="Klaudia";
	CopyString("Aleksander", cAfterCopyTest1);
	if (strcmp("Aleksander", cAfterCopyTest1)==0) printf("OK\n\n "); else printf("Error\n\n ");

      printf("Test 2 - ");
	//kopiowanie pustego ³añcucha
	char cAfterCopyTest2[]="Klaudia";
	CopyString("", cAfterCopyTest2);
	if (strcmp("", cAfterCopyTest2)==0) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test  3- ");
    //pierwszy ³añcuch krótszy
	char cAfterCopyTest3[]="Klaudia";
	CopyString("Bajur", cAfterCopyTest3);
	if (strcmp("Bajur", cAfterCopyTest3)==0) printf("OK\n\n "); else printf("Error\n\n ");

}

//----------------------------------------------------------
void TestOf_eCompareString(void) {

	printf("eCompareString\n\n ");

	printf("Test 1 - ");
	//identyczne ³anuchy znaków
	if (eCompareString("Klaudia", "Klaudia")==EQUAL) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 2 - ");
	//rozne ³ancuchy znakow, lecz o tej samej d³ugoœci
	if (eCompareString("Klaudia", "Barbara")==DIFFERENT) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 3 - ");
	//³añcuchy o ró¿nej d³ugosci
	if (eCompareString("Klaudia", "Kla")==DIFFERENT) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 4 - ");
	//dwa puste ³añcuchy znakowe
	if (eCompareString("", "")==EQUAL) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 5 - ");
	//pierwszy pusty ³añcuch znakowy
	if (eCompareString("", "Klaudia")==DIFFERENT) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 6 - ");
	//drugi pusty ³añcuch znakowy
	if (eCompareString("Klaudia", "")==DIFFERENT) printf("OK\n\n\n"); else printf("Error\n\n\n");
}


//----------------------------------------------------------
void TestOf_AppendString(void) {

	printf("AppendString\n\n ");

	printf("Test 1 - ");
	//dodanie dowolnego ³añcucha znakowego wedle wymaganego formatu
	char cAppendingTest1[]="Bajur";
	AppendString("Klaudia", cAppendingTest1);
	if (strcmp("BajurKlaudia", cAppendingTest1) ==0) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 2 - ");
	//dodanie pustego ³anucha znakowego
	char cAppendingTest2[]="Klaudia";
	AppendString("", cAppendingTest2);
	if (strcmp("Klaudia", cAppendingTest2) ==0) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 3 - ");
	//dodanie ³ancucha znakowego do pustego ³añucha
	char cAppendingTest3[]="";
	AppendString("Klaudia", cAppendingTest3);
	if (strcmp( "Klaudia", cAppendingTest3)==0) printf("OK\n\n\n"); else printf("Error\n\n\n");
}


//----------------------------------------------------------
void TestOf_ReplaceCharactersInString(void) {

	printf("ReplaceCharactersInString\n\n ");

	printf("Test 1 - ");
	// ma³a litera a na du¿¹ O
	char cOryginalCharTest1[]="Klaudia Bajur";
	ReplaceCharactersInString(cOryginalCharTest1, 'a', 'O');
	if (strcmp(cOryginalCharTest1, "KlOudiO BOjur")==0) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 2 - ");
	//spacja na znak NULL
	char cOryginalCharTest2[]=" Klaudia Bajur ";
	ReplaceCharactersInString(cOryginalCharTest2, ' ', '\0');
	if (strcmp(cOryginalCharTest2, "\0Klaudia\0Bajur\0")==0) printf("OK\n\n\n"); else printf("Error\n\n\n");
}

void UIntToHexStr (unsigned int uiValue, char pcStr[]) {
	unsigned char ucNibbleCounter;
	unsigned char ucCurrentNibble;

	pcStr[0]='0';
	pcStr[1]='x';
	pcStr[6]=NULL;

	for(ucNibbleCounter=0; ucNibbleCounter<4; ucNibbleCounter++) {

		ucCurrentNibble=(uiValue >> (ucNibbleCounter*4))&0x0F;

		if(ucCurrentNibble<10){
			pcStr[5-ucNibbleCounter] = '0' + ucCurrentNibble;
		}
		else
			pcStr[5-ucNibbleCounter] = 'A' + (ucCurrentNibble-10);
	}
}

enum Result {OK, ERROR};

enum Result eHexStringToUInt (char pcStr[], unsigned int *puiValue) {

	unsigned char ucCharacterCounter;
	unsigned char ucCurrentCharacter;

	*puiValue=0;

	if((pcStr[0]!='0') || (pcStr[1]!='x' || pcStr[2]==NULL)){
		return ERROR;
	}
	for(ucCharacterCounter=2; pcStr[ucCharacterCounter] != NULL; ucCharacterCounter++) {

		if(ucCharacterCounter==6){
			return ERROR;
		}
		ucCurrentCharacter = pcStr[ucCharacterCounter];
		*puiValue = *puiValue<<4;

		if(ucCurrentCharacter <= '9' & ucCurrentCharacter >= '0'){
			*puiValue= *puiValue | (ucCurrentCharacter - '0');
		}
		else if(ucCurrentCharacter>='A' && ucCurrentCharacter<='F'){
			*puiValue = *puiValue | (ucCurrentCharacter - 'A' + 10);
		}
		else {
		return ERROR;
		}
	}
  return OK;
}

void AppendUIntToString (unsigned int uiValue, char pcDestinationStr[]) {
	unsigned char ucCharacterCounter;

	for(ucCharacterCounter=0; pcDestinationStr[ucCharacterCounter]!=NULL; ucCharacterCounter++){}
	UIntToHexStr(uiValue, &pcDestinationStr[ucCharacterCounter]);
}



void TestOf_UIntToHexStr(void) {

	printf("UIntToHexStr\n\n ");

	printf("Test 1 - ");
	//max d³ugoœæ- wartoœæ z krancy przedzia³ow hex
	char cAfterConverion[6];
	UIntToHexStr(0x09AF, cAfterConverion);
	if (strcmp(cAfterConverion, "0x09AF")==0) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 2 - ");
	//mniejsza d³ugoœci ni¿ max- zera po 0x
	UIntToHexStr(0x22, cAfterConverion);
	if (strcmp(cAfterConverion, "0x0022")==0) printf("OK\n\n\n"); else printf("Error\n\n\n");
}


//----------------------------------------------------------
void TestOf_eHexStringToUInt() {

	enum Result iReturnResult;
	unsigned int uiReturnValue;

	printf("eHexStringToUInt\n\n ");

	printf("Test 1 - ");
	//wartoœæ z krancy przedzialow hex(0, 9, 10, 15)
	iReturnResult = eHexStringToUInt("0x09AF", &uiReturnValue);
	if (iReturnResult==OK) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 2 - ");
	//niezgodnosc z formatem -NULL bezposrednio po 0x(za krótki)
	iReturnResult = eHexStringToUInt("0x", &uiReturnValue);
	if (iReturnResult==ERROR) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 3 - ");
	//niezgodnosc z formatem- za dlugi lancuch znaków
	iReturnResult = eHexStringToUInt("0xFFDC2", &uiReturnValue);
	if (iReturnResult==ERROR) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 4 - ");
	//niezgodnosc z formatem- pocz¹tek ró¿ny od 0x
	iReturnResult = eHexStringToUInt("klhfcsd", &uiReturnValue);
	if (iReturnResult==ERROR) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 5 - ");
	//mniejsza liczba znakow niz maksymalna po 0x
	iReturnResult = eHexStringToUInt("0x034", &uiReturnValue);
	if (iReturnResult==OK) printf("OK\n\n\n"); else printf("Error\n\n\n");
}

//----------------------------------------------------------
void TestOf_AppendUIntToString() {

	printf("AppendUIntToString\n\n ");

	printf("Test 1 - ");
	//niepusty ³ancuch znakow
	char cOryginalCharTest1[]="Klaudia";
	AppendUIntToString(0x1234,cOryginalCharTest1);
	if (strcmp(cOryginalCharTest1,"Klaudia0x1234")==0) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 2 - ");
	//dodanie liczby do pustego ³añcucha znaków
	char cOryginalCharTest2[]="";
	AppendUIntToString(0x1234,cOryginalCharTest2);
	if (strcmp(cOryginalCharTest2,"0x1234")==0) printf("OK\n\n\n"); else printf("Error\n\n\n");
}
//____________________________________________________________________
#define MAX_TOKEN_NR 3
#define NULL 0
#define MAX_KEYWORD_NR 3
#define MAX_KEYWORD_STRING_LTH 10

enum KeywordCode {LD, ST, RST};

union TokenValue{
    enum KeywordCode eKeyword;
    unsigned int uiNumber;
    char* pcString;
};

enum TokenType {KEYWORD, NUMBER, STRING};

struct Token{
    enum  TokenType  eType;
    union TokenValue uValue;
};

struct Token asToken[MAX_TOKEN_NR];


struct Keyword{
    enum KeywordCode eCode;
    char cString[MAX_KEYWORD_STRING_LTH + 1];
};



struct Keyword asKeywordList[MAX_KEYWORD_NR]={
	{RST,"reset"},
	{LD, "load" },
	{ST, "store"}
};


unsigned char ucTokenNr;

enum State{TOKEN, DELIMITER};


unsigned char ucFindTokensInString(char *pcString){

    enum State eState=DELIMITER;
    unsigned char ucTokenNr=0;
    unsigned char ucCharacterCounter;

    unsigned char ucCurrentCharacter;

     for(ucCharacterCounter=0;;ucCharacterCounter++){
        ucCurrentCharacter=pcString[ucCharacterCounter];
        switch(eState){
            case TOKEN:
            {
                if(ucTokenNr==MAX_TOKEN_NR){
                    return ucTokenNr;
                }
                else if(ucCurrentCharacter==NULL){
                    return ucTokenNr;
                }
                else if(ucCurrentCharacter!=' '){
                   eState=TOKEN;
                }
                else{
                    eState=DELIMITER;
                }
                break;
            }
            case DELIMITER:
            {
                if(ucCurrentCharacter==NULL){
                    return ucTokenNr;
                }

                else if(ucCurrentCharacter==' '){
                  eState=DELIMITER;
                }

                else{
                    eState=TOKEN;
                    asToken[ucTokenNr].uValue.pcString=pcString+ucCharacterCounter;
                    ucTokenNr++;
                }
                break;
            }
        }
    }
}

enum Result eStringToKeyword (char pcStr[],enum KeywordCode *peKeywordCode){
    unsigned char ucKeywordCounter;
    for(ucKeywordCounter=0; ucKeywordCounter< MAX_KEYWORD_NR; ucKeywordCounter++){

        if(EQUAL == eCompareString(asKeywordList[ucKeywordCounter].cString, pcStr)){
            *peKeywordCode= asKeywordList[ucKeywordCounter].eCode;
            return OK;
       }
    }
    return ERROR;
}
void DecodeTokens(void){

    unsigned char ucTokenCounter;
    struct Token *psCurrentToken;
    unsigned int uiTokenValue;
    enum KeywordCode eTokenCode;

    for(ucTokenCounter = 0; ucTokenCounter < ucTokenNr; ucTokenCounter++){
        psCurrentToken = &asToken[ucTokenCounter];
        if(OK == eHexStringToUInt(psCurrentToken->uValue.pcString, &uiTokenValue)){
            psCurrentToken->eType = NUMBER;
            psCurrentToken->uValue.uiNumber= uiTokenValue;
        }
        else if(OK== eStringToKeyword(psCurrentToken->uValue.pcString, &eTokenCode)){
            psCurrentToken->eType=KEYWORD;
            psCurrentToken->uValue.eKeyword=eTokenCode;
        }
        else{
            psCurrentToken->eType=STRING;
        }
    }
}

void DecodeMsg(char *pcString){
    ucTokenNr= ucFindTokensInString(pcString);
    ReplaceCharactersInString(pcString, ' ', NULL);
    DecodeTokens();
}

void TestOf_ucFindTokensInString() {

	unsigned char ucTokenNumber;

	printf("ucFindTokensInString\n\n ");

	printf("Test 1 - ");
	//max liczba tokenów
	ucTokenNumber=ucFindTokensInString("0x2222 Klaudia reset");
	if (ucTokenNumber==3) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 2 - ");
	//pusty ³añcuch
	ucTokenNumber=ucFindTokensInString("    ");
	if (ucTokenNumber==0) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 3 - ");
	//delimiter przed pierwszym tokenem
	ucTokenNumber=ucFindTokensInString("   0x2222 Klaudia ");
	if (ucTokenNumber==2) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 4 - ");
	//wiecej niz jeden delimiter pomiedzy tokenami
	ucTokenNumber=ucFindTokensInString("0x2222   Klaudia      reset");
	if (ucTokenNumber==3) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 5 - ");
	//mniej tokenów ni¿ max
	char pcTestString[]="0x2222 Klaudia";
	ucTokenNumber=ucFindTokensInString(pcTestString);
	if (ucTokenNumber==2) printf("OK\n\n\n"); else printf("Error\n\n\n");
}

//----------------------------------------------------------
void TestOf_eStringToKeyword() {

	enum KeywordCode eTokenCode;

	printf("eStringToKeyword\n\n ");

	printf("Test 1 - ");
	//podanie slowa kluczowego
	if (eStringToKeyword("reset", &eTokenCode)==OK) printf("OK\n\n "); else printf("Error\n\n ");

	printf("Test 2 - ");
	//podanie s³owa niebêd¹cego kluczowym
	if (eStringToKeyword("Klaudia", &eTokenCode)==ERROR) printf("OK\n\n\n"); else printf("Error\n\n\n");
}

//----------------------------------------------------------
void TestOf_DecodeTokens()
{
    char cKomunikat[] = {"0x3343 ABDCDEFGH reset"};
    printf("DecodeTokens\n\n ");

    printf("Test 1 - ");
    //dekodowanie tokenow
    ucTokenNr=ucFindTokensInString(cKomunikat);
    ReplaceCharactersInString(cKomunikat,' ',NULL);
    DecodeTokens();
    if((asToken[0].eType==NUMBER) && (asToken[0].uValue.uiNumber==0x3343) &&
        (asToken[1].eType==STRING) && (&cKomunikat[7]==asToken[1].uValue.pcString) &&
        (asToken[2].eType==KEYWORD) && (asToken[2].uValue.eKeyword==RST)) printf("OK\n\n"); else printf("Error\n\n");
}


//----------------------------------------------------------
void TestOf_DecodeMsg() {

	char pcToDecode[]="0x3333 Klaudia reset";

	printf("DecodeMsg\n\n ");

	printf("Test 1 - ");
	//liczba, string, keyword
	DecodeMsg(pcToDecode);
	if ((asToken[0].eType==NUMBER) && (asToken[0].uValue.uiNumber==0x3333) &&
		(asToken[1].eType==STRING) && (&pcToDecode[7]==asToken[1].uValue.pcString) &&
	(asToken[2].eType==KEYWORD) && (asToken[2].uValue.eKeyword==RST)) printf("OK\n\n\n"); else printf("Error\n\n\n");
}


int main(void) {

	printf("TESTY FUNKCJI - LANCUCHY ZNAKOWE - OPERACJE PROSTE\n\n\n");

	TestOf_CopyString();
	TestOf_eCompareString();
	TestOf_AppendString();
	TestOf_ReplaceCharactersInString();

	printf("TESTY FUNKCJI - LANCUCHY ZNAKOWE - KONWERSJE\n\n\n");

	TestOf_UIntToHexStr();
	TestOf_eHexStringToUInt();
	TestOf_AppendUIntToString();

	printf("TESTY FUNKCJI - DEKODOWANIE KOMUNIKATOW\n\n\n");

	TestOf_ucFindTokensInString();
	TestOf_eStringToKeyword();
	TestOf_DecodeTokens();
	TestOf_DecodeMsg();
}

