#include <LPC21xx.H>
#define MAX_TOKEN_NR 3 
#define NULL 0 
#define MAX_KEYWORD_NR 3 
#define MAX_KEYWORD_STRING_LTH 10 // mksymalna dlugosc komendy (wykozystywana w struct Keyword)

enum CompResult {DIFFERENT, EQUAL};
enum Result{OK, ERROR};

enum CompResult eCompareString(char pcStr1[], char pcStr2[]){

	unsigned char ucCounter;
	for(ucCounter = 0; pcStr1[ucCounter] > 0; ucCounter++){
        if(pcStr1[ucCounter] != pcStr2[ucCounter]) {
            return DIFFERENT;
        }
	}
	if(pcStr1[ucCounter] != pcStr2[ucCounter]) {
        return DIFFERENT;
	}
  return EQUAL;
}

enum Result eHexStringToUInt (char pcStr[], unsigned int *puiValue) {
	
	unsigned char ucCharacterCounter;
	unsigned char ucCurrentCharacter;
	
	*puiValue=0;
	
	if((pcStr[0]!='0') || (pcStr[1]!='x' || pcStr[2]==NULL)){
		return ERROR;
	}
	for(ucCharacterCounter=2; pcStr[ucCharacterCounter] != NULL; ucCharacterCounter++) {
		
		if(ucCharacterCounter==6){
			return ERROR;
		}
		ucCurrentCharacter = pcStr[ucCharacterCounter];
		*puiValue = *puiValue<<4;
		
		if(ucCurrentCharacter <= '9' & ucCurrentCharacter >= '0'){
			*puiValue= *puiValue | (ucCurrentCharacter - '0');
		}
		else if(ucCurrentCharacter>='A' && ucCurrentCharacter<='F'){
			*puiValue = *puiValue | (ucCurrentCharacter - 'A' + 10);
		}
		else {
		return ERROR;
		}
	}
  return OK;
}

void ReplaceCharactersInString(char pcString[],char cOldChar,char cNewChar){

	unsigned char ucCounter;
	for(ucCounter = 0; pcString[ucCounter] > 0; ++ucCounter){
		if(pcString[ucCounter] == cOldChar){
			pcString[ucCounter] = cNewChar;
		}
	}
}

enum KeywordCode {LD, ST, RST};
    
/* Zmienne przekazywane sa do funkcji przez wartosc, a tablice 
przez wskaznik. Po wykonaniu funkcji wartosc zmiennej
n nie zmieni sie, natomiast tablica zostanie wypelniona 
Tablice przekazywane sa do funkcji w odmienny sposób, niz zmienne. Jesli przekazuje sie do funkcji argumenty nie bedace
tablicami, to w momencie wywolania funkcji tworzone sa zmienne o nazwach parametrów funkcji, zmienne te inicjalizowane 
sa wartosciami argumentów podanymi w instrukcji wywolania funkcji. Natomiast, jesli argumentem funkcji jest tablica, 
to w momencie wywolania funkcji, nie jest tworzona kopia tej tablicy*/

union TokenValue{ 
    enum KeywordCode eKeyword; 
    unsigned int uiNumber; 
    char* pcString; 
}; 

enum TokenType {KEYWORD, NUMBER, STRING};

struct Token{ 
    enum  TokenType  eType; 
    union TokenValue uValue; 
};  

//Poniewaz w pojedynczym komunikacie mamy najczesciej do czynienia wiecej niz z jednym tokenem wiec wynik
//dekodowania bedzie przechowywany w tablicy tokenów
struct Token asToken[MAX_TOKEN_NR];  // zm glob wypelniana przez DecodeMsg na podstawie cUartRxBuffer i asCommandList


struct Keyword{ 
    enum KeywordCode eCode; 
    char cString[MAX_KEYWORD_STRING_LTH + 1]; 
}; 

  
//Deklaracja listy poprawnych slów kluczowych
// zmienna globalna asKeywordList uzywana przez bStringToCommand
// dla tokenu reset bedocego typem KEYWORD wartoscia(typu enum) jes RST
struct Keyword asKeywordList[MAX_KEYWORD_NR]={ //tutaj tworze obiekt typu struct Keyword,(lista obiektow typu struct Keyword.) asKeywordList przechowuje w kolejnych wierszach elementy typu Keyword
    {RST,"reset"}, //po prawej cString (z Keyword) a po lewej eCode (typu enum KeywordCode)
    {LD, "load" }, //kod slowa kluczowego i zwiazany z nim lancuch znakowy
    {ST, "store"} //deklaracja slow kluczowych
}; 
  

unsigned char ucTokenNr; // zmienna globalna oznaczajaca liczbe tokenów w zdekodowanym komunikacie

enum WorkType{TOKEN, DELIMITER};  
    
/*
f-kcja Wypelnia pola uValue tablicy asToken wskaznikami na poczatki tokenów znajdujacych sie w lancuchu znakowym String.
Funkcja zwracac ilosc znalezionych tokenów.
*/
unsigned char ucFindTokensInString(char *pcString){ 

    enum WorkType eTryb=DELIMITER; //wartosc poczatkowa ustawiamy jako delimiter zeby nie pisac dodatkowego warunku w petli

    unsigned char ucTokenNr=0; 
    unsigned char ucArrayIndex; //indeks dekodowanego elementu tablicy
                                //zlicza znaki w wprowadzanym stringu iterator w petli
    unsigned char ucCurrentCharacter; 
  
     for(ucArrayIndex=0;;ucArrayIndex++){ 
        ucCurrentCharacter=pcString[ucArrayIndex]; //wartosc aktualnego elementu tablicy
        switch(eTryb){ 
 /*
 switch sprawdza wartosc wyrazenia (tu eTryb) w zaleznosci od wartosci prezechodzi do case z ta wartoscia i wykonuje sie do slowa break
 w 1 iteracji zawsze najpierw wykona sie case DELIMITER
 w którym jezeli wartosc elementu tablicy=null(koniec tokenu) zwracany jest numer danego tokenu(ilosc tokenów wtablicy)
 jesli dany element jest spacja wartosc eTryb nadal wynosi DELIMITER czyli w kolejnej iteracji wykona sie ten case
 
 jesli ma inna wartosc niz ww dla eTryb przyporzadkowywana jest wartosc TOKEN 
 
 natomiast watosc licznika ucTokenNumber jest inkrementowana(iloscznalezionych tokenów) a switch zakonczy dzialanie
 
 
 jezeli w DELIMITER natrafiono na wartosc rózna niz /s i null w koolejnej iteracji petli for wykona sie case TOKEN
 W którym jezeli natrafimy na element którego wartosc jest równa maksymalnemu dopuszalnemu elementowi tokenu 
 funkcja zwróci jego numer
 jezeli wartosc elementu tablicy=0(koniec tokenu) zwracany jest numer danego elementu
 jesli dany element jest rózny od spacji wartosc eTryb nadal wynosi TOKEN w przeciwnym wypadku zmieniana jest
 na DELIMITER a case konczy dzialanie
 w skrócie fkcja wykonuje sie do osiagniecia maksymalnej dlugosci tokenu lub osiagniecia nulla zwracajac wtedy jego dlugosc
 
 */
            case TOKEN: 
            { 
                if(ucTokenNr==MAX_TOKEN_NR){ //sprawdza czy token nie ma za duzo liter max 3
                    return ucTokenNr; 
                } 
                else if(ucCurrentCharacter==NULL){ //sprawdza czy dosliszby do konca wejsciowego stringa do funkji
                    return ucTokenNr; 
                } 
                else if(ucCurrentCharacter!=' '){ //sprawdza czy mamy delimiter jak nie to dalej ustawia stan na token
                   eTryb=TOKEN; 
                } 
                else{ 
                    eTryb=DELIMITER; 
                } 
                break; 
            } 
            case DELIMITER: 
            { 
                if(ucCurrentCharacter==NULL){ 
                    return ucTokenNr; 
                } 

                else if(ucCurrentCharacter==' '){ 
                  eTryb=DELIMITER; 
                } 

                else{ 
                    eTryb=TOKEN; 
                    asToken[ucTokenNr].uValue.pcString=pcString+ucArrayIndex; //.odniesienie do pola uValue, tutaj wejdzie przy pierwszym obiegu petli, pcstring wskazuje na pierwszy znak w tablicy, pamiec ciagla, dodanie uccounter wskaze na autkalny znak czyli poczatek tokena w tym przypadku
                                            // w miejsce o indeksie ucTokenNr (w tablicy asToken) jako wartosc (uValue) o rodzaju string (pcstring) wpisz wskaznik  w miejsce w ktorym zaczna sie token
                    ucTokenNr++; 
                } 

                break; 
            } 
        } 
    } 
} 
 
/* 
Zadaniem funkcji jest zamienic lancuch znakowy na kod slowa kluczowego na podstawie listy slów kluczowych.
W przypadku powodzenia funkcja powinna zwracac wartosci OK.
W przypadku niepowodzenia funkcja powinna zwracac wartosci ERROR.

enum zwracajacy KODY keywordów odnalezione w stringu na podstawie listy slów kloczowych
dla wszystkich wartosci mniejszych niz 3(max dl keywordu) jezeli token otrymany w ucFindTokensInString
jest z zgodny z któryms z zdeklarowanych keywordów 

oraz zwracana jest wartosc OK 
gdy przekroczona zostanie wartosc ucArrayIndex< MAX_KEYWORD_NR lub odnalezione zostanie slowo niezgodne z 
lista slów kluczowych for zakonczy dzialanie i zwrócony zostanie ERROR
*/

enum Result eStringToKeyword (char pcStr[],enum KeywordCode *peKeywordCode){ 
  //pe - pointer enum, sama funkcja ma zwraca result(OK/ERROR) ale jakos musimy wplywac na dzialanie programu 
  //wiec rezultat zamiany ze stringa na keyword zwracamy przez argument(wskaznik na enum keywordcode)
    unsigned char ucArrayIndex;   
//sama petla dziala tak, ze przechodzi po elementach asKeywordList i porownuje pole cString 
//jesli eCopeString zwroci EQUAL to warnek spelniony (wchodzimy do if) a warunek spelniony wtedy gdy: pcString (to co podajemy do funkcji) 

    for(ucArrayIndex=0; ucArrayIndex< MAX_KEYWORD_NR; ucArrayIndex++){ 

        if(EQUAL == eCompareString(asKeywordList[ucArrayIndex].cString, pcStr)){ 
            *peKeywordCode= asKeywordList[ucArrayIndex].eCode; 
            // jest rowne polu cString ze struktury Keyword - przypisanie wartosci do miejsca na ktore wskazuje wskaznik
            return OK; 
       } 
    } 
    return ERROR; 
} 

/*
Zadaniem funkcji jest zdekodowac wszystkie tokeny tj. dla kazdego tokenu ustalic jego typ i wartosc i wpisac je do
tablicy asToken.
Nalezy skorzystac ze wskazników poczatków tokenów znajdujacych sie w
asToken[0..ucTokenNr].uValue.pcString (patrz funkcja ucFindTokensInString).
*/


void DecodeTokens(void){ 

    unsigned char ucArrayIndex; 
    struct Token *psCurrentToken; 
    unsigned int uiTokenValue; 
    enum KeywordCode eTokenCode; //przypisanie kodu tokena

    for(ucArrayIndex = 0; ucArrayIndex < ucTokenNr; ucArrayIndex++){ 
        psCurrentToken = &asToken[ucArrayIndex]; //pscurrenttoken wskaznik na elemtn tablicy o indeksie ucTokenCounter
        if(OK == eHexStringToUInt(psCurrentToken->uValue.pcString, &uiTokenValue)){ 
            psCurrentToken->eType = NUMBER; 
            psCurrentToken->uValue.uiNumber= uiTokenValue; 
        } 
        else if(OK== eStringToKeyword(psCurrentToken->uValue.pcString, &eTokenCode)){ 
            psCurrentToken->eType=KEYWORD; 
            psCurrentToken->uValue.eKeyword=eTokenCode; 
        } 
        else{ 
            psCurrentToken->eType=STRING; 
        } 
    } 
} 


void DecodeMsg(char *pcString){ 
    ucTokenNr= ucFindTokensInString(pcString); 
    ReplaceCharactersInString(pcString, ' ', NULL); 
    DecodeTokens(); 
} 

int main(){
	
}

