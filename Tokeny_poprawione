#include <LPC21xx.H>
#define MAX_TOKEN_NR 3 
#define NULL 0 
#define MAX_KEYWORD_NR 3 
#define MAX_KEYWORD_STRING_LTH 10

enum CompResult {DIFFERENT, EQUAL};
enum Result{OK, ERROR};

enum CompResult eCompareString(char pcStr1[], char pcStr2[]){

	unsigned char ucCounter;
	for(ucCounter = 0; pcStr1[ucCounter] > 0; ucCounter++){
        if(pcStr1[ucCounter] != pcStr2[ucCounter]) {
            return DIFFERENT;
        }
	}
	if(pcStr1[ucCounter] != pcStr2[ucCounter]) {
        return DIFFERENT;
	}
  return EQUAL;
}

enum Result eHexStringToUInt (char pcStr[], unsigned int *puiValue) {
	
	unsigned char ucCharacterCounter;
	unsigned char ucCurrentCharacter;
	
	*puiValue=0;
	
	if((pcStr[0]!='0') || (pcStr[1]!='x' || pcStr[2]==NULL)){
		return ERROR;
	}
	for(ucCharacterCounter=2; pcStr[ucCharacterCounter] != NULL; ucCharacterCounter++) {
		
		if(ucCharacterCounter==6){
			return ERROR;
		}
		ucCurrentCharacter = pcStr[ucCharacterCounter];
		*puiValue = *puiValue<<4;
		
		if(ucCurrentCharacter <= '9' & ucCurrentCharacter >= '0'){
			*puiValue= *puiValue | (ucCurrentCharacter - '0');
		}
		else if(ucCurrentCharacter>='A' && ucCurrentCharacter<='F'){
			*puiValue = *puiValue | (ucCurrentCharacter - 'A' + 10);
		}
		else {
		return ERROR;
		}
	}
  return OK;
}

void ReplaceCharactersInString(char pcString[],char cOldChar,char cNewChar){

	unsigned char ucCounter;
	for(ucCounter = 0; pcString[ucCounter] > 0; ++ucCounter){
		if(pcString[ucCounter] == cOldChar){
			pcString[ucCounter] = cNewChar;
		}
	}
}

enum KeywordCode {LD, ST, RST};

union TokenValue{ 
    enum KeywordCode eKeyword; 
    unsigned int uiNumber; 
    char* pcString; 
}; 

enum TokenType {KEYWORD, NUMBER, STRING};

struct Token{ 
    enum  TokenType  eType; 
    union TokenValue uValue; 
};  

struct Token asToken[MAX_TOKEN_NR]; 


struct Keyword{ 
    enum KeywordCode eCode; 
    char cString[MAX_KEYWORD_STRING_LTH + 1]; 
}; 

  

struct Keyword asKeywordList[MAX_KEYWORD_NR]={
	{RST,"reset"},
	{LD, "load" },
	{ST, "store"}
};
  

unsigned char ucTokenNr; 

enum State{TOKEN, DELIMITER};  
    

unsigned char ucFindTokensInString(char *pcString){ 

    enum State eState=DELIMITER; 
    unsigned char ucTokenNr=0; 
    unsigned char ucCharacterCounter; 
                                
    unsigned char ucCurrentCharacter; 
  
     for(ucCharacterCounter=0;;ucCharacterCounter++){ 
        ucCurrentCharacter=pcString[ucCharacterCounter]; 
        switch(eState){ 
            case TOKEN: 
            { 
                if(ucTokenNr==MAX_TOKEN_NR){ 
                    return ucTokenNr; 
                } 
                else if(ucCurrentCharacter==NULL){ 
                    return ucTokenNr; 
                } 
                else if(ucCurrentCharacter!=' '){
                   eState=TOKEN; 
                } 
                else{ 
                    eState=DELIMITER; 
                } 
                break; 
            } 
            case DELIMITER: 
            { 
                if(ucCurrentCharacter==NULL){ 
                    return ucTokenNr; 
                } 

                else if(ucCurrentCharacter==' '){ 
                  eState=DELIMITER; 
                } 

                else{ 
                    eState=TOKEN; 
                    asToken[ucTokenNr].uValue.pcString=pcString+ucCharacterCounter;
                    ucTokenNr++; 
                } 
                break; 
            } 
        } 
    } 
} 

enum Result eStringToKeyword (char pcStr[],enum KeywordCode *peKeywordCode){ 
    unsigned char ucKeywordCounter;   
    for(ucKeywordCounter=0; ucKeywordCounter< MAX_KEYWORD_NR; ucKeywordCounter++){ 

        if(EQUAL == eCompareString(asKeywordList[ucKeywordCounter].cString, pcStr)){ 
            *peKeywordCode= asKeywordList[ucKeywordCounter].eCode; 
            return OK; 
       } 
    } 
    return ERROR; 
} 
void DecodeTokens(void){ 

    unsigned char ucTokenCounter; 
    struct Token *psCurrentToken; 
    unsigned int uiTokenValue; 
    enum KeywordCode eTokenCode;

    for(ucTokenCounter = 0; ucTokenCounter < ucTokenNr; ucTokenCounter++){ 
        psCurrentToken = &asToken[ucTokenCounter];
        if(OK == eHexStringToUInt(psCurrentToken->uValue.pcString, &uiTokenValue)){ 
            psCurrentToken->eType = NUMBER; 
            psCurrentToken->uValue.uiNumber= uiTokenValue; 
        } 
        else if(OK== eStringToKeyword(psCurrentToken->uValue.pcString, &eTokenCode)){ 
            psCurrentToken->eType=KEYWORD; 
            psCurrentToken->uValue.eKeyword=eTokenCode; 
        } 
        else{ 
            psCurrentToken->eType=STRING; 
        } 
    } 
} 
//Co porownujemy w pojedynczej iteracji ?
/*W pojedynczej iteracji por√≥wnujemy  pcStr  i 
aktualny cString ze struktury Keyword, bedacy elementem tablicy asKeywordList wskazywany przez ucKeywordCounter */

void DecodeMsg(char *pcString){ 
    ucTokenNr= ucFindTokensInString(pcString); 
    ReplaceCharactersInString(pcString, ' ', NULL); 
    DecodeTokens(); 
} 

char cTab[] = "Klaudia reset 0x22";
int main(){
	DecodeMsg(cTab);
}
