#include <LPC21xx.H>
#include "Led.h"
#include "Timer_interrupt.h"
#include "Servo.h"

#define DETECTOR_bm (1<<10)

enum ServoState {CALLIB, IDLE, IN_PROGRESS};
enum DetectorState {ACTIVE , INACTIVE};

struct Servo{
	enum ServoState eState;
	unsigned int uiCurrentPosition;
	unsigned int uiDesiredPosition;
};

struct Servo sServo;


void DetectorInit(){
    IO0DIR = (IO0DIR & ! DETECTOR_bm);
    }

enum DetectorState eReadDetector(void)
{
	if ((IO0PIN & DETECTOR_bm) == 0){
		return ACTIVE;
	}
	else{
		return INACTIVE;
	}
}


void Automat(){
	switch(sServo.eState){
		case IN_PROGRESS:
			if (sServo.uiDesiredPosition == sServo.uiCurrentPosition){
				sServo.eState = IDLE;
			}
			else if (sServo.uiCurrentPosition > sServo.uiDesiredPosition){
				LedStepLeft();
				sServo.uiCurrentPosition--;
			}
			else if (sServo.uiCurrentPosition < sServo.uiDesiredPosition){
				LedStepRight();
				sServo.uiCurrentPosition++;
			}
			else sServo.eState = IN_PROGRESS;
			break;
		case IDLE:
			if (sServo.uiCurrentPosition != sServo.uiDesiredPosition){
				sServo.eState = IN_PROGRESS;
			}
			else{
				sServo.eState = IDLE;
			}
			break;
		case CALLIB:
			if (eReadDetector() == ACTIVE){
				sServo.uiCurrentPosition = 0;
				sServo.uiDesiredPosition = 0;
				sServo.eState = IDLE;
			}
			else{
				LedStepLeft();
				sServo.eState = CALLIB;
			}
			break;
	}
}

void ServoGoTo(unsigned int uiPosition){
		sServo.uiDesiredPosition = uiPosition;
}

void ServoCallib(void){
	  if(eReadDetector() == INACTIVE){
			sServo.eState = CALLIB;
		}
}

void ServoInit(unsigned int uiServoFrequency){
	LedInit();
	DetectorInit();
	ServoCallib();
	Timer0Interrupts_Init((1000000/uiServoFrequency), &Automat);
}
